var mongodb = require('./../models/mongodb');var MongoClient = require('mongodb').MongoClient; var db = require('./../models/db');var userEntity = require('./../models/UserEntity');var userDao = require('./../models/UserDao');var gridFS = require('./../models/GridFS');var qs = require('querystring');var path = require('path');var fs = require('fs');var sys = require("sys");var user = exports;user.hello = function (request, response){	response.send("hello");};user.welcome = function (request, response){	response.send("Welcome "+ request.get[0]);};user.welcome1 = function (request, response){	response.view("welcome1.html", {}, {});};user.processwelcome1 = function (request, response){	response.send("Welcome "+ request.post["wel"]);};user.reg = function (request, response){	response.view("register.html", {}, {});};user.login = function (request, response){	response.view("login.html", {}, {});};user.upload1 = function(request, response){	response.view("upload1.html", {}, {});};user.processupload1 = function(request, response){	response.send(JSON.stringify(request.files['upload-file']));};user.json = function (request, response){	response.JSON({"name":"liva", "age":33});};user.logout = function (request, response){	var cookies = qs.parse(request.headers.cookie,';');	//console.log(cookies);	//response.send(cookies['sid']);		var user = {};	user["username"] = cookies['sid'];		var server = new mongodb.Server(db.dbServer, db.dbPort, {});	new mongodb.Db(db.dbName, server, {}).open(function (error, client) {		if (error) throw error;		var collection = new mongodb.Collection(client, "users");	  		collection.count(user, function(err, count) {			//console.log("count=" + count);			if(count >= 1){				collection.update(user, {$set: {status: 0}}, {safe:true,multi:true},                        function(err) {							if (err) console.warn(err.message);							else{ 								console.log('successfully updated');								response.setHeader('Set-Cookie', ['sid=null']);								response.send("Logout ok.");							}							client.close();						});			}			else{				client.close();				response.send("Logout failure!");			}		});	});};user.processlogin = function (request, response){	var user = {};	user["username"] = request.post["username"];	user["password"] = request.post["password"];		var server = new mongodb.Server(db.dbServer, db.dbPort, {});	new mongodb.Db(db.dbName, server, {}).open(function (error, client) {		if (error) throw error;		var collection = new mongodb.Collection(client, "users");	  		collection.count(user, function(err, count) {			//console.log("count=" + count);			if(count >= 1){				collection.update(user, {$set: {status: 1}}, {safe:true,multi:true},                        function(err) {							if (err) console.warn(err.message);							else{ 								console.log('successfully updated');								response.setHeader('Set-Cookie', ['sid='+user["username"]]);								response.send("Login ok.");							}							client.close();						});			}			else{				client.close();				response.send("Login failure!");			}		});	});};user.update = function (request, response){	var cookies = qs.parse(request.headers.cookie,';');	var user = {};	user["username"] = request.get[0];		var server = new mongodb.Server(db.dbServer, db.dbPort, {});	new mongodb.Db(db.dbName, server, {}).open(function (error, client) {		if (error) throw error;		var collection = new mongodb.Collection(client, 'users');				collection.count({"username":cookies['sid'], "status":1, "type":2}, function(err, count) {			if(count >=1){				collection.count(user, function(err, count) {					if(count >= 1){						collection.find(user).toArray(function(err, results) {							var d = {"username":results[0]["username"], "password":results[0]["password"], "email":results[0]["email"]};														client.close();							response.view("update.html", d, {});						});					}				});			}			else{				client.close();				response.send("You hava no privilege.");			}		});	});};user.mod = function (request, response){	var user = {};	user["username"] = request.get[0];	user["password"] = request.post["password"];	user["email"] = request.post["email"];		var server = new mongodb.Server(db.dbServer, db.dbPort, {});	new mongodb.Db(db.dbName, server, {}).open(function (error, client) {		if (error) throw error;		var collection = new mongodb.Collection(client, "users");	  		collection.count({"username":request.get[0]}, function(err, count) {			//console.log("count=" + count);			if(count >= 1){				collection.update({"username":request.get[0]}, {$set: {password: request.post["password"], email:request.post["email"]}}, {safe:true},function(err, objects) {					if (err) console.warn(err.message);					if (err && err.message.indexOf('E11000 ') !== -1) {					  console.log("this _id was already inserted in the database.");					}					// Close the db					client.close();					response.send("Update OK.");				});			}			else{				client.close();				response.send("Update failure!");			}		});	});};user.del = function (request, response){	var user = {};	user["username"] = request.get[0];		//response.send(request.get[0]);		var server = new mongodb.Server(db.dbServer, db.dbPort, {});	new mongodb.Db(db.dbName, server, {}).open(function (error, client) {		if (error) throw error;		var collection = new mongodb.Collection(client, "users");	  		collection.count(user, function(err, count) {			//console.log("count=" + count);			if(count >= 1){				collection.remove(user,                        function(err) {							if (err) console.warn(err.message);							else{ 								console.log('successfully removed');								response.send("remove ok.");							}							client.close();						});			}			else{				client.close();				response.send("remove failure!");			}		});	});};user.file1 = function (request, response){	var Db = require('./../../../node_modules/mongodb/lib/mongodb').Db,	  Server = require('./../../../node_modules/mongodb/lib/mongodb').Server,	  GridStore = require('./../../../node_modules/mongodb/lib/mongodb').GridStore;	  	var db1 = new Db('node-mongo-examples', new Server(db.dbServer, db.dbPort, {}), {native_parser:false});	db1.open(function(err, db) {		// Write a new file		var gridStore = new GridStore(db, "foobar", "w");		gridStore.open(function(err, gridStore) {    			gridStore.write("hello world!", function(err, gridStore) {				gridStore.close(function(err, result) {					db.close();  					response.send("OK.");                });            });        });    });};user.file2 = function (request, response){	var Db = require('./../../../node_modules/mongodb/lib/mongodb').Db,	  Server = require('./../../../node_modules/mongodb/lib/mongodb').Server,	  GridStore = require('./../../../node_modules/mongodb/lib/mongodb').GridStore;	  	var db1 = new Db('node-mongo-examples', new Server(db.dbServer, db.dbPort, {}), {native_parser:false});	db1.open(function(err, db) {		// Write a new file		var gridStore = new GridStore(db, "foobar", "r");		gridStore.open(function(err, gridStore) {    			sys.puts("contentType: " + gridStore.contentType);            sys.puts("uploadDate: " + gridStore.uploadDate);            sys.puts("chunkSize: " + gridStore.chunkSize);            sys.puts("metadata: " + gridStore.metadata); 			GridStore.read(db, "foobar", function(err, data) {				sys.puts(data);				gridStore.close(function() {					db.close();					response.send("OK.");				});			});                     });    });};user.test = function (request, response){	var u = new userEntity.UserEntity();	u.username = "liva";	response.send(JSON.stringify(u));};user.test1 = function (request, response){	var u = Object.create(userEntity.UserEntity1);	u.username = "liva";	u.password = "a";	u.email = "a";	u.type = 1;	response.send(JSON.stringify(u));};user.test2 = function (request, response){	var u = userEntity.UserEntity2.createNew();	u.username = "liva";	u["password"] = "1";	response.send(JSON.stringify(u));};user.add = function (request, response){	var user = userEntity.UserEntity2.createNew();	//var user = {};	user["username"] = request.post["username"];	user["password"] = request.post["password"];	user["email"] = request.post["email"];	//用户类型:1表示普通用户， 2表示管理员	user["type"] = 1;	//用户状态: 0表示离线， 1表示在线	user["status"] = 0;	console.log(path.extname(request.files["headimage"].name));	fs.rename(request.files["headimage"].path, request.files["headimage"].path+path.extname(request.files["headimage"].name), function (err) {		if (err) throw err;		console.log('renamed complete');		//获得文件名		console.log("hi");			var filename = path.basename(request.files["headimage"].path) + 			path.extname(request.files["headimage"].name);		console.log(filename);					//存入数据库中		gridFS.write(filename, ".\\"+request.files["headimage"].path+path.extname(request.files["headimage"].name));				user["image"] = filename;		console.log(JSON.stringify(user));		var cb1 = function (){			response.redirect("/test/user/list");		};		var cb2 = function (){			response.send("User exist!");		};		userDao.add({"username":request.post["username"]}, user, cb1, cb2);	});};user.list = function (request, response){	var cp, ps;	cp = request.post["page"]?request.post["page"]:1;	ps = 4;		var cb = function (data, page){		response.view("users.html", data, page);	};		userDao.page(cp, ps, cb);};user.download = function (request, response){	if(request.get.length >= 2){ 				var cb = function (data){			response.file(request.get[1], data);		};				gridFS.read(request.get[0]+"."+request.get[1], cb);	}};